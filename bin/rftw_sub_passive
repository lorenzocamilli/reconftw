#!/bin/bash

# Default config path
CONFIG_PATH="${RECONFTW_CFG}"

# Check if the config file exists
if [[ -f "${CONFIG_PATH}" ]]; then
    source "${CONFIG_PATH}"
else
    echo "Error: reconftw.cfg not found at ${CONFIG_PATH}!"
    exit 1
fi

# Help Menu
function display_help() {
	echo "$(basename "$0") [OPTIONS]"
	echo "Options:"
	echo "  -d, --domain          Set the target domain."
	echo "  -a, --amass           Run amass."
	echo "  -s, --subfinder       Run subfinder."
	echo "  -g, --github-tokens   Specify GitHub tokens file."
	echo "  -l, --gitlab-tokens   Specify GitLab tokens file."
	echo "  -D, --deep            Run in deep mode."
	echo "  -o, --output          Specify the output file."
	echo "  -h, --help            Display this help menu."
}

# Variables for input and output
output_file=""

# Input validation and argument parsing
while [[ $# -gt 0 ]]; do
	case $1 in
	-d | --domain)
		DOMAIN="$2"
		shift
		;;
	-a | --amass) RUNAMASS=true ;;
	-s | --subfinder) RUNSUBFINDER=true ;;
	-g | --github-tokens)
		GITHUB_TOKENS="$2"
		shift
		;;
	-l | --gitlab-tokens)
		GITLAB_TOKENS="$2"
		shift
		;;
	-D | --deep) DEEP=true ;;
	-o | --output)
		shift
		output_file="$1"
		touch "${output_file}" 2>/dev/null || {
			echo "Error: Cannot write to the specified output file."
			exit 1
		}
		;;
	-h | --help)
		display_help
		exit 0
		;;
	*)
		echo "Unknown parameter passed: $1"
		display_help
		exit 1
		;;
	esac
	shift
done

# Validate domain
if [[ -z ${DOMAIN} ]]; then
	echo "Error: Domain not provided."
	display_help
	exit 1
fi

# Call the domain validation script
rftw_util_validatedomain "${DOMAIN}" || exit 1

mkdir -p .tmp 2>/dev/null
if [[ ${RUNAMASS} == true ]]; then
	timeout -k 1m "${AMASS_ENUM_TIMEOUT}" amass enum -passive -d "${DOMAIN}" -config "${AMASS_CONFIG}" -timeout "${AMASS_ENUM_TIMEOUT}" -json .tmp/amass_json.json &>/dev/null
fi
[[ -s ".tmp/amass_json.json" ]] && cat .tmp/amass_json.json | jq -r '.name' | anew -q .tmp/amass_psub.txt
[[ ${RUNSUBFINDER} == true ]] && subfinder -all -d "${DOMAIN}" -silent -o .tmp/subfinder_psub.txt &>/dev/null
if [[ -s ${GITHUB_TOKENS} ]]; then
	if [[ ${DEEP} == true ]]; then
		github-subdomains -d "${DOMAIN}" -t "${GITHUB_TOKENS}" -o .tmp/github_subdomains_psub.txt &>/dev/null
	else
		github-subdomains -d "${DOMAIN}" -k -q -t "${GITHUB_TOKENS}" -o .tmp/github_subdomains_psub.txt &>/dev/null
	fi
fi
if [[ -s ${GITLAB_TOKENS} ]]; then
	gitlab-subdomains -d "${DOMAIN}" -t "$GITLAB_TOKENS" | tee .tmp/gitlab_subdomains_psub.txt &>/dev/null
fi
# Save results to the specified output file if provided
if [[ -n ${output_file} ]]; then
	cat .tmp/*_psub.txt >"${output_file}"
fi
