#!/bin/bash

# Load environment variables
if [[ -f "reconftw.cfg" ]]; then
	source reconftw.cfg
else
	echo "Error: reconftw.cfg not found!"
	exit 1
fi

function print_help() {
	echo "$(basename "$0") [-d <domain>] [-h]"
	echo ""
	echo "Options:"
	echo "  -d <domain>     Specify target domain"
	echo "  -h              Display this help message"
	echo ""
}

function start_subfunc() {
	# This function is just a placeholder as the original function details were not provided.
	echo "Starting function $1 with message: $2"
}

function end_subfunc() {
	# This function is just a placeholder as the original function details were not provided.
	echo "Ending function $2 with result: $1"
}

function check_inscope() {
	# Placeholder for check_inscope function
	echo "Checking inscope for file $1"
}

function resolvers_update_quick_local() {
	# Placeholder for resolvers_update_quick_local function
	echo "Updating local resolvers"
}

function resolvers_update_quick_axiom() {
	# Placeholder for resolvers_update_quick_axiom function
	echo "Updating axiom resolvers"
}

domain=""
while getopts "d:h" option; do
	case "${option}" in
	d) domain=${OPTARG} ;;
	h)
		print_help
		exit 0
		;;
	*)
		print_help
		exit 1
		;;
	esac
done

if [[ -z ${DOMAIN} ]]; then
	echo "Error: Domain is required!"
	print_help
	exit 1
fi

# Main function
sub_recursive_brute() {

	if [[ $(cat subdomains/subdomains.txt | wc -l) -le $DEEP_LIMIT ]]; then
		[[ ! -s ".tmp/subdomains_recurs_top.txt" ]] && dsieve -if subdomains/subdomains.txt -f 3 -top $DEEP_RECURSIVE_PASSIVE >.tmp/subdomains_recurs_top.txt
		ripgen -d .tmp/subdomains_recurs_top.txt -w $subs_wordlist >.tmp/brute_recursive_wordlist.txt
		if [[ ! ${AXIOM} == true ]]; then
			resolvers_update_quick_local
			[[ -s ".tmp/brute_recursive_wordlist.txt" ]] && puredns resolve .tmp/brute_recursive_wordlist.txt -r $resolvers --resolvers-trusted $resolvers_trusted -l $PUREDNS_PUBLIC_LIMIT --rate-limit-trusted $PUREDNS_TRUSTED_LIMIT --wildcard-tests $PUREDNS_WILDCARDTEST_LIMIT --wildcard-batch $PUREDNS_WILDCARDBATCH_LIMIT -w .tmp/brute_recursive_result.txt 2>>"${LOGFILE}" >/dev/null
		else
			resolvers_update_quick_axiom
			[[ -s ".tmp/brute_recursive_wordlist.txt" ]] && axiom-scan .tmp/brute_recursive_wordlist.txt -m puredns-resolve -r /home/op/lists/resolvers.txt --resolvers-trusted /home/op/lists/resolvers_trusted.txt --wildcard-tests $PUREDNS_WILDCARDTEST_LIMIT --wildcard-batch $PUREDNS_WILDCARDBATCH_LIMIT -o .tmp/brute_recursive_result.txt "${AXIOM_EXTRA_ARGS}" 2>>"${LOGFILE}" >/dev/null
		fi
		[[ -s ".tmp/brute_recursive_result.txt" ]] && cat .tmp/brute_recursive_result.txt | anew -q .tmp/brute_recursive.txt
		if [[ $PERMUTATIONS_OPTION == "gotator" ]]; then
			[[ -s ".tmp/brute_recursive.txt" ]] && gotator -sub .tmp/brute_recursive.txt -perm"${tools}"/permutations_list.txt $GOTATOR_FLAGS -silent 2>>"${LOGFILE}" | head -c "${PERMUTATIONS_LIMIT}" >.tmp/gotator1_recursive.txt
		else
			[[ -s ".tmp/brute_recursive.txt" ]] && ripgen -d .tmp/brute_recursive.txt -w"${tools}"/permutations_list.txt 2>>"${LOGFILE}" | head -c "${PERMUTATIONS_LIMIT}" >.tmp/gotator1_recursive.txt
		fi
		if [[ ! ${AXIOM} == true ]]; then
			[[ -s ".tmp/gotator1_recursive.txt" ]] && puredns resolve .tmp/gotator1_recursive.txt -w .tmp/permute1_recursive.txt -r $resolvers --resolvers-trusted $resolvers_trusted -l $PUREDNS_PUBLIC_LIMIT --rate-limit-trusted $PUREDNS_TRUSTED_LIMIT --wildcard-tests $PUREDNS_WILDCARDTEST_LIMIT --wildcard-batch $PUREDNS_WILDCARDBATCH_LIMIT 2>>"${LOGFILE}" >/dev/null
		else
			[[ -s ".tmp/gotator1_recursive.txt" ]] && axiom-scan .tmp/gotator1_recursive.txt -m puredns-resolve -r /home/op/lists/resolvers.txt --resolvers-trusted /home/op/lists/resolvers_trusted.txt --wildcard-tests $PUREDNS_WILDCARDTEST_LIMIT --wildcard-batch $PUREDNS_WILDCARDBATCH_LIMIT -o .tmp/permute1_recursive.txt "${AXIOM_EXTRA_ARGS}" 2>>"${LOGFILE}" >/dev/null
		fi
		if [[ $PERMUTATIONS_OPTION == "gotator" ]]; then
			[[ -s ".tmp/permute1_recursive.txt" ]] && gotator -sub .tmp/permute1_recursive.txt -perm"${tools}"/permutations_list.txt $GOTATOR_FLAGS -silent 2>>"${LOGFILE}" | head -c "${PERMUTATIONS_LIMIT}" >.tmp/gotator2_recursive.txt
		else
			[[ -s ".tmp/permute1_recursive.txt" ]] && ripgen -d .tmp/permute1_recursive.txt -w"${tools}"/permutations_list.txt 2>>"${LOGFILE}" | head -c "${PERMUTATIONS_LIMIT}" >.tmp/gotator2_recursive.txt
		fi
		if [[ ! ${AXIOM} == true ]]; then
			[[ -s ".tmp/gotator2_recursive.txt" ]] && puredns resolve .tmp/gotator2_recursive.txt -w .tmp/permute2_recursive.txt -r $resolvers --resolvers-trusted $resolvers_trusted -l $PUREDNS_PUBLIC_LIMIT --rate-limit-trusted $PUREDNS_TRUSTED_LIMIT --wildcard-tests $PUREDNS_WILDCARDTEST_LIMIT --wildcard-batch $PUREDNS_WILDCARDBATCH_LIMIT 2>>"${LOGFILE}" >/dev/null
		else
			[[ -s ".tmp/gotator2_recursive.txt" ]] && axiom-scan .tmp/gotator2_recursive.txt -m puredns-resolve -r /home/op/lists/resolvers.txt --resolvers-trusted /home/op/lists/resolvers_trusted.txt --wildcard-tests $PUREDNS_WILDCARDTEST_LIMIT --wildcard-batch $PUREDNS_WILDCARDBATCH_LIMIT -o .tmp/permute2_recursive.txt "${AXIOM_EXTRA_ARGS}" 2>>"${LOGFILE}" >/dev/null
		fi
		cat .tmp/permute1_recursive.txt .tmp/permute2_recursive.txt 2>>"${LOGFILE}" | anew -q .tmp/permute_recursive.txt
	else
		end_subfunc "skipped in this mode or defined in reconftw.cfg" ${FUNCNAME[0]}
	fi
	if [[ ${INSCOPE} == true ]]; then
		check_inscope .tmp/permute_recursive.txt 2>>"${LOGFILE}" >/dev/null
		check_inscope .tmp/brute_recursive.txt 2>>"${LOGFILE}" >/dev/null
	fi
	# Last validation
	cat .tmp/permute_recursive.txt .tmp/brute_recursive.txt 2>>"${LOGFILE}" | anew -q .tmp/brute_perm_recursive.txt
	if [[ ! ${AXIOM} == true ]]; then
		[[ -s ".tmp/brute_recursive.txt" ]] && puredns resolve .tmp/brute_perm_recursive.txt -w .tmp/brute_perm_recursive_final.txt -r "${resolvers}" --resolvers-trusted "${resolvers_trusted}" -l "${PUREDNS_PUBLIC_LIMIT}" --rate-limit-trusted "${PUREDNS_TRUSTED_LIMIT}" --wildcard-tests "${PUREDNS_WILDCARDTEST_LIMIT}" --wildcard-batch "${PUREDNS_WILDCARDBATCH_LIMIT}" 2>>"${LOGFILE}" >/dev/null
	else
		[[ -s ".tmp/brute_recursive.txt" ]] && axiom-scan .tmp/brute_perm_recursive.txt -m puredns-resolve -r /home/op/lists/resolvers.txt --resolvers-trusted /home/op/lists/resolvers_trusted.txt --wildcard-tests $PUREDNS_WILDCARDTEST_LIMIT --wildcard-batch $PUREDNS_WILDCARDBATCH_LIMIT -o .tmp/brute_perm_recursive_final.txt "${AXIOM_EXTRA_ARGS}" 2>>"${LOGFILE}" >/dev/null
	fi

}

# Call main function
sub_recursive_brute
