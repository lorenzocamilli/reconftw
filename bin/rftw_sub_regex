#!/bin/bash

# Configuration file loading
CONFIG_FILE="reconftw.cfg"
if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
else
    echo "Configuration file '$CONFIG_FILE' not found. Exiting."
    exit 1
fi

# Helper function to display usage/help menu
usage() {
    echo "$(basename "$0") [OPTIONS]"
    echo
    echo "Options:"
    echo "  -h, --help          Display this help and exit."
    echo
    echo "Make sure to set up 'reconftw.cfg' with required environment variables."
    exit 1
}

# Input validation
if [[ "$#" -eq 1 && ("$1" == "-h" || "$1" == "--help") ]]; then
    usage
fi

# Check for mandatory variables
if [[ -z "$SUBREGEXPERMUTE" || -z "$called_fn_dir" || -z "$DIFF" ]]; then
    echo "Mandatory variables not set in the configuration file. Exiting."
    exit 1
fi

sub_regex_permut() {
		cd "${tools}/regulator" || { echo "Failed to cd directory in ${FUNCNAME[0]} @ line ${LINENO}"; exit 1; }
		python3 main.py -t "${DOMAIN}" -f ${dir}/subdomains/subdomains.txt -o ${dir}/.tmp/${domain}.brute
		cd "${dir}" || { echo "Failed to cd to $dir in ${FUNCNAME[0]} @ line ${LINENO}"; exit 1; }

		if [[ ! ${AXIOM} = true ]]; then
			resolvers_update_quick_local
			[[ -s ".tmp/${domain}.brute" ]] && puredns resolve .tmp/${domain}.brute -w .tmp/regulator.txt -r "${resolvers}" --resolvers-trusted "${resolvers_trusted}" -l "${PUREDNS_PUBLIC_LIMIT}" --rate-limit-trusted "${PUREDNS_TRUSTED_LIMIT}" --wildcard-tests "${PUREDNS_WILDCARDTEST_LIMIT}" --wildcard-batch "${PUREDNS_WILDCARDBATCH_LIMIT}" 2>>"${LOGFILE}" >/dev/null
		else
			resolvers_update_quick_axiom
			[[ -s ".tmp/${domain}.brute" ]] && axiom-scan .tmp/${domain}.brute -m puredns-resolve -r /home/op/lists/resolvers.txt --resolvers-trusted /home/op/lists/resolvers_trusted.txt --wildcard-tests $PUREDNS_WILDCARDTEST_LIMIT --wildcard-batch $PUREDNS_WILDCARDBATCH_LIMIT -o .tmp/regulator.txt "${AXIOM_EXTRA_ARGS}" 2>>"${LOGFILE}" >/dev/null
		fi
		
		if [[ -s ".tmp/regulator.txt" ]]; then
			[[ -s "$outOfScope_file" ]] && deleteOutScoped $outOfScope_file .tmp/regulator.txt
			[[ "${INSCOPE}" = true ]] && check_inscope .tmp/regulator.txt 2>>"${LOGFILE}" >/dev/null
			NUMOFLINES=$(cat .tmp/regulator.txt 2>>"${LOGFILE}" | grep ".$domain$" | anew subdomains/subdomains.txt | sed '/^$/d' | wc -l)
		else
			NUMOFLINES=0
		fi
}

# Execute the main function
sub_regex_permut