#!/bin/bash

# Default config path
CONFIG_PATH="${RECONFTW_CFG}"

# Check if the config file exists
if [[ -f "${CONFIG_PATH}" ]]; then
    source "${CONFIG_PATH}"
else
    echo "Error: reconftw.cfg not found at ${CONFIG_PATH}!"
    exit 1
fi

# Function to display help menu
help_menu() {
	echo "$(basename "$0") [OPTIONS]"
	echo "Options:"
	echo "  -d, --domain          Set the target domain."
	echo "  -h, --help            Display this help and exit."
	echo "  -f, --input-file      Specify the input file with a list of domains."
	echo "  -o, --output-file     Specify the output file for saving results."
	echo "Ensure all required environment variables are set in reconftw.cfg"
	exit 0
}

# Validate domain using rftw_util_validatedomain
validate_domain() {
	rftw_util_validatedomain "$1" || {
		echo "Invalid domain: $1"
		exit 1
	}
}

# Parse input arguments
while [[ $# -gt 0 ]]; do
	case $1 in
	-d | --domain)
		DOMAIN="$2"
		shift
		;;
	-f | --input-file)
		INPUTFILE="$2"
		shift
		;;
	-o | --output-file)
		OUTPUTFILE="$2"
		shift
		;;
	-h | --help) help_menu ;;
	*)
		echo "Unknown parameter passed: $1"
		help_menu
		exit 1
		;;
	esac
	shift
done

# If an input file is provided, validate it
if [[ -n ${INPUTFILE} ]] && [[ ! -f ${INPUTFILE} ]]; then
	echo "Error: Input file ${INPUTFILE} not found!"
	exit 1
fi

# Input validation
if [[ -z ${DOMAIN} ]]; then
	echo "No domain provided."
	help_menu
	exit 1
fi

validate_domain "${DOMAIN}"

# Function to start the process
start_func() {
	echo "[*] $1"
}

# Function to end the process
end_func() {
	echo "[+] $1"
}

# Function to notify the user
notification() {
	echo "[!] $1"
}

# Main function to gather subdomain info
subdomains_full_func() {
	echo "Starting subdomain enumeration for${DOMAIN}/"

	NUMOFLINES_subs="0"
	NUMOFLINES_probed="0"
	printf "${bgreen}#######################################################################\n\n"
	! [[ ${DOMAIN} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9] ]] && printf "${bblue} Subdomain Enumeration${DOMAIN}/\n\n"
	[[ ${DOMAIN} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9] ]] && printf "${bblue} Scanning IP${DOMAIN}/\n\n"
	[[ -s "subdomains/subdomains.txt" ]] && cp subdomains/subdomains.txt .tmp/subdomains_old.txt
	[[ -s "webs/webs.txt" ]] && cp webs/webs.txt .tmp/probed_old.txt

	if ([[ ! -f "${called_fn_dir}/.sub_active" ]] || [[ ! -f "${called_fn_dir}/.sub_brute" ]] || [[ ! -f "${called_fn_dir}/.sub_permut" ]] || [[ ! -f "${called_fn_dir}/.sub_recursive_brute" ]]) || [[ ${DIFF} == true ]]; then
		resolvers_update
	fi

	[[ -s ${inScope_file} ]] && cat ${inScope_file} | anew -q subdomains/subdomains.txt

	if ! [[ ${DOMAIN} =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9] ]] && [[ ${SUBDOMAINS_GENERAL} == true ]]; then
		rftw_sub_passive
		rftw_sub_crt
		rftw_sub_active
		rftw_sub_noerror
		rftw_sub_brute
		rftw_sub_permut
		rftw_sub_regex_permut
		rftw_sub_recursive_passive
		rftw_sub_recursive_brute
		rftw_sub_dns
		rftw_sub_scraping
		rftw_sub_analytics
	else
		notification "IP/CIDR detected, subdomains search skipped"
		echo "${DOMAIN}" | anew -q subdomains/subdomains.txt
	fi

	webprobe_simple
	if [[ -s "subdomains/subdomains.txt" ]]; then
		[[ -s $outOfScope_file ]] && deleteOutScoped $outOfScope_file subdomains/subdomains.txt
		NUMOFLINES_subs=$(cat subdomains/subdomains.txt 2>>"${LOGFILE}" | anew .tmp/subdomains_old.txt | sed '/^$/d' | wc -l)
	fi
	if [[ -s "webs/webs.txt" ]]; then
		[[ -s $outOfScope_file ]] && deleteOutScoped $outOfScope_file webs/webs.txt
		NUMOFLINES_probed=$(cat webs/webs.txt 2>>"${LOGFILE}" | anew .tmp/probed_old.txt | sed '/^$/d' | wc -l)
	fi

	if [[ -n ${OUTPUTFILE} ]]; then
		cat subdomains/subdomains.txt >"${OUTPUTFILE}"
		cat webs/webs.txt >>"${OUTPUTFILE}"
	fi

	printf "${bblue}\n Total subdomains: ${reset}\n\n"
	notification "- ${NUMOFLINES_subs} alive" good
	[[ -s "subdomains/subdomains.txt" ]] && cat subdomains/subdomains.txt | sort
	notification "- ${NUMOFLINES_probed} new web probed" good
	[[ -s "webs/webs.txt" ]] && cat webs/webs.txt | sort
	notification "Subdomain Enumeration Finished" good
	printf "${bblue} Results are saved in${DOMAIN}/subdomains/subdomains.txt and webs/webs.txt${reset}\n"
	printf "${bgreen}#######################################################################\n\n"
}

# Call the main function
# Logic to handle multiple domains if INPUTFILE is provided
if [[ -n "${INPUTFILE}" ]]; then
	while read -r domain; do
		subdomains_full_func
	done <""${INPUTFILE}""
else
	subdomains_full_func
fi
