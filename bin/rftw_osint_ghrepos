#!/bin/bash

# Default config path
CONFIG_PATH="${RECONFTW_CFG}"

# Check if the config file exists
if [[ -f "${CONFIG_PATH}" ]]; then
    source "${CONFIG_PATH}"
else
    echo "Error: reconftw.cfg not found at ${CONFIG_PATH}!"
    exit 1
fi

# Help menu
function help_menu() {
	echo -e "Usage: ./rftw_osint_ghrepos.sh [OPTIONS]"
	echo -e "Options:"
	echo -e "  -d, --domain DOMAIN       Specify the domain"
	echo -e "  -t, --tokens FILE  Specify the path to the GitHub tokens file"
	echo -e "  -o, --output FILE         (Optional) Specify the output file path (prints to stdout if not set)"
	echo -e "  -h, --help                Display this help menu"
	exit 1
}

# Main function
function github_repos() {
	# Validate tools
	mkdir -p .tmp

	if [[ -s ${github_tokens} ]]; then
		GH_TOKEN=$(cat "${github_tokens}" | head -1)
		echo "${DOMAIN}" | unfurl format %r >.tmp/company_name.txt
		enumerepo -token-string "${GH_TOKEN}" -usernames .tmp/company_name.txt -o .tmp/company_repos.txt >/dev/null
		[[ -s ".tmp/company_repos.txt" ]] && jq -r '.[].repos[]|.url' <.tmp/company_repos.txt >.tmp/company_repos_url.txt
		mkdir -p .tmp/github_repos
		mkdir -p .tmp/github
		[[ -s ".tmp/company_repos_url.txt" ]] && interlace -tL .tmp/company_repos_url.txt -threads "${INTERLACE_THREADS}" -c "git clone _target_  .tmp/github_repos/_cleantarget_"
		[[ -d ".tmp/github/" ]] && ls .tmp/github_repos >.tmp/github_repos_folders.txt
		[[ -s ".tmp/github_repos_folders.txt" ]] && interlace -tL .tmp/github_repos_folders.txt -threads "${INTERLACE_THREADS}" -c "gitleaks detect --source .tmp/github_repos/_target_ --no-banner --no-color -r .tmp/github/gh_secret_cleantarget_.json"
		[[ -s ".tmp/company_repos_url.txt" ]] && interlace -tL .tmp/company_repos_url.txt -threads "${INTERLACE_THREADS}" -c "trufflehog git _target_ -j 2>&1 | jq -c > _output_/_cleantarget_" -o .tmp/github/
		if [[ -d ".tmp/github/" ]]; then
			if [[ -z $output_file ]]; then
				cat .tmp/github/* 2>/dev/null | jq -c | jq -r
			else
				cat .tmp/github/* 2>/dev/null | jq -c | jq -r >"${output_file}"
			fi
		fi
	else
		printf "\n${bred} Required file ${GITHUB_TOKENS} not exists or empty${reset}\n"
	fi
}

# Default values
DOMAIN=""
github_tokens=""
output_file=""

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
	case $1 in
	-d | --domain)
		DOMAIN="$2"
		shift
		;;
	-t | --tokens)
		github_tokens="$2"
		shift
		;;
	-o | --output)
		output_file="$2"
		shift
		;;
	-h | --help) help_menu ;;
	*)
		echo -e "${bred}Unknown parameter passed: $1${reset}" >&2
		help_menu
		;;
	esac
	shift
done

# Validate the domain using the utility script
rftw_util_validatedomain "${DOMAIN}" || exit 1

# Validate inputs
if [[ -z ${DOMAIN} ]] || [[ -z ${github_tokens} ]]; then
	echo -e "${bred}Error: Missing required parameters.${reset}" >&2
	help_menu
	exit 1
fi

# Execute the main function
github_repos
