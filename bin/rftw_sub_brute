#!/bin/bash

# Load environment variables from reconftw.cfg
if [[ -f "reconftw.cfg" ]]; then
	source reconftw.cfg
else
	echo "Error: reconftw.cfg not found!"
	exit 1
fi

# Help menu
display_help() {
	echo "$(basename "$0") [Options]"
	echo "Options:"
	echo "  -h, --help              Display this help and exit"
	echo "  -i, --input INPUT_FILE  Specify the input file"
	echo "  -o, --output OUTPUT_FILE Specify the output file"
	echo
	echo "Ensure all required environment variables are set in reconftw.cfg"
	exit 1
}

# Initialize input_file and output_file variables
input_file=""
output_file=""

# Parse input arguments
while [[ $# -gt 0 ]]; do
	case $1 in
	-h | --help) display_help ;;
	-i | --input)
		shift
		input_file="$1"
		if [[ ! -f ${input_file} ]]; then
			echo "Error: Input file does not exist."
			exit 1
		fi
		;;
	-o | --output)
		shift
		output_file="$1"
		touch "${output_file}" 2>/dev/null || {
			echo "Error: Cannot write to the specified output file."
			exit 1
		}
		;;
	*)
		echo "Unknown parameter passed: $1"
		display_help
		;;
	esac
	shift
done

# Main logic
sub_brute() {
	if [[ ${AXIOM} != true ]]; then
		resolvers_update_quick_local
		if [[ ${DEEP} == true ]]; then
			puredns bruteforce "${subs_wordlist_big}" "${DOMAIN}" -w .tmp/subs_brute.txt -r "${resolvers}" --resolvers-trusted "${resolvers_trusted}" -l "${PUREDNS_PUBLIC_LIMIT}" --rate-limit-trusted "${PUREDNS_TRUSTED_LIMIT}" --wildcard-tests "${PUREDNS_WILDCARDTEST_LIMIT}" --wildcard-batch "${PUREDNS_WILDCARDBATCH_LIMIT}" 2>>"${LOGFILE}" >/dev/null
		else
			puredns bruteforce "${subs_wordlist}" "${DOMAIN}" -w .tmp/subs_brute.txt -r "${resolvers}" --resolvers-trusted "${resolvers_trusted}" -l "${PUREDNS_PUBLIC_LIMIT}" --rate-limit-trusted "${PUREDNS_TRUSTED_LIMIT}" --wildcard-tests "${PUREDNS_WILDCARDTEST_LIMIT}" --wildcard-batch "${PUREDNS_WILDCARDBATCH_LIMIT}" 2>>"${LOGFILE}" >/dev/null
		fi
		[[ -s ".tmp/subs_brute.txt" ]] && puredns resolve .tmp/subs_brute.txt -w .tmp/subs_brute_valid.txt -r "${resolvers}" --resolvers-trusted "${resolvers_trusted}" -l "${PUREDNS_PUBLIC_LIMIT}" --rate-limit-trusted "${PUREDNS_TRUSTED_LIMIT}" --wildcard-tests "${PUREDNS_WILDCARDTEST_LIMIT}" --wildcard-batch "${PUREDNS_WILDCARDBATCH_LIMIT}" 2>>"${LOGFILE}" >/dev/null
	else
		resolvers_update_quick_axiom
		if [[ ${DEEP} == true ]]; then
			axiom-scan "${subs_wordlist_big}" -m puredns-single "${DOMAIN}" -r /home/op/lists/resolvers.txt --resolvers-trusted /home/op/lists/resolvers_trusted.txt --wildcard-tests "${PUREDNS_WILDCARDTEST_LIMIT}" --wildcard-batch "${PUREDNS_WILDCARDBATCH_LIMIT}" -o .tmp/subs_brute.txt "${AXIOM_EXTRA_ARGS}" 2>>"${LOGFILE}" >/dev/null
		else
			axiom-scan "${subs_wordlist}" -m puredns-single "${DOMAIN}" -r /home/op/lists/resolvers.txt --resolvers-trusted /home/op/lists/resolvers_trusted.txt --wildcard-tests "${PUREDNS_WILDCARDTEST_LIMIT}" --wildcard-batch "${PUREDNS_WILDCARDBATCH_LIMIT}" -o .tmp/subs_brute.txt "${AXIOM_EXTRA_ARGS}" 2>>"${LOGFILE}" >/dev/null
		fi
		[[ -s ".tmp/subs_brute.txt" ]] && axiom-scan .tmp/subs_brute.txt -m puredns-resolve -r /home/op/lists/resolvers.txt --resolvers-trusted /home/op/lists/resolvers_trusted.txt --wildcard-tests "${PUREDNS_WILDCARDTEST_LIMIT}" --wildcard-batch "${PUREDNS_WILDCARDBATCH_LIMIT}" -o .tmp/subs_brute_valid.txt "${AXIOM_EXTRA_ARGS}" 2>>"${LOGFILE}" >/dev/null
	fi
}

sub_brute
