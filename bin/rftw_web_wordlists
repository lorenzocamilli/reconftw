#!/bin/bash

# Default config path
CONFIG_PATH="${RECONFTW_CFG}"

# Check if the config file exists
if [[ -f "${CONFIG_PATH}" ]]; then
    source "${CONFIG_PATH}"
else
    echo "Error: reconftw.cfg not found at ${CONFIG_PATH}!"
    exit 1
fi

# Help menu
help_menu() {
	echo "$(basename "$0") [OPTIONS]"
	echo "Wordlist Generation"
	echo ""
	echo "Options:"
	echo "  -d, --domain DOMAIN     Set domain (required)"
	echo "  -h, --help              Display this help message and exit"
	exit 0
}

# Input validation
if [[ $# -eq 0 ]]; then
	help_menu
fi

DOMAIN=""
while [[ $1 != "" ]]; do
	case $1 in
	-d | --domain)
		shift
		DOMAIN=$1
		;;
	-h | --help)
		help_menu
		exit
		;;
	*)
		echo "Unknown option: $1"
		exit 1
		;;
	esac
	shift
done

if [[ -z ${DOMAIN} ]]; then
	echo "Error: Domain is required!"
	exit 1
fi

wordlist_gen() {
	local DOMAIN=$1
	start_func ${FUNCNAME[0]} "Wordlist generation"
	if [[ -s ".tmp/url_extract_tmp.txt" ]]; then
		cat .tmp/url_extract_tmp.txt | unfurl -u keys | sed 's/[][]//g' | sed 's/[#]//g' | sed 's/[}{]//g' | anew -q webs/dict_params.txt
		cat .tmp/url_extract_tmp.txt | unfurl -u values | sed 's/[][]//g' | sed 's/[#]//g' | sed 's/[}{]//g' | anew -q webs/dict_values.txt
		cat .tmp/url_extract_tmp.txt | tr "[:punct:]" "\n" | anew -q webs/dict_words.txt
	fi
	[[ -s ".tmp/js_endpoints.txt" ]] && cat .tmp/js_endpoints.txt | unfurl -u format %s://%d%p | anew -q webs/all_paths.txt
	[[ -s ".tmp/url_extract_tmp.txt" ]] && cat .tmp/url_extract_tmp.txt | unfurl -u format %s://%d%p | anew -q webs/all_paths.txt
	end_func "Results are saved in ${DOMAIN}/webs/dict_[words|paths].txt" ${FUNCNAME[0]}
	if [[ $PROXY == true ]] && [[ -n $proxy_url ]] && [[ $(cat webs/all_paths.txt | wc -l) -le $DEEP_LIMIT2 ]]; then
		notification "Sending urls to proxy" info
		ffuf -mc all -w webs/all_paths.txt -u FUZZ -replay-proxy $proxy_url
	fi
}

wordlist_gen ${DOMAIN}
