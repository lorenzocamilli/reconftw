#!/bin/bash

# Load environment variables from reconftw.cfg
# Load environment variables
if [[ -f "reconftw.cfg" ]]; then
	source reconftw.cfg
else
	echo "Error: reconftw.cfg not found!"
	exit 1
fi

help_menu() {
	echo "$(basename "$0") [DOMAIN] [OPTIONS]"
	echo "Web probing tool for specified domain."
	echo
	echo "Options:"
	echo "  -h, --help   Display this help menu and exit"
	echo "  -f, --force  Force the execution even if it was already processed"
}

validate_inputs() {
	if [[ -z ${DOMAIN} ]]; then
		echo -e "${yellow} No domain provided! ${reset}"
		exit 1
	fi

	if [[ $WEBPROBESIMPLE != true ]] && [[ $FORCE_EXECUTION != true ]]; then
		echo -e "${yellow} webprobe_simple skipped in this mode or defined in reconftw.cfg ${reset}"
		exit 0
	fi
}

run_webprobe_simple() {
	start_subfunc "webprobe_simple" "Running : Http probing${domain}/"
	if [[ ! ${AXIOM} == true ]]; then
		cat subdomains/subdomains.txt | httpx ${HTTPX_FLAGS} -no-color -json -random-agent -threads $HTTPX_THREADS -rl $HTTPX_RATELIMIT -retries 2 -timeout $HTTPX_TIMEOUT -o .tmp/web_full_info_probe.txt 2>>"${LOGFILE}" >/dev/null
	else
		axiom-scan subdomains/subdomains.txt -m httpx ${HTTPX_FLAGS} -no-color -json -random-agent -threads $HTTPX_THREADS -rl $HTTPX_RATELIMIT -retries 2 -timeout $HTTPX_TIMEOUT -o .tmp/web_full_info_probe.txt "${AXIOM_EXTRA_ARGS}" 2>>"${LOGFILE}" >/dev/null
	fi

	cat .tmp/web_full_info.txt .tmp/web_full_info_probe.txt webs/web_full_info.txt 2>>"${LOGFILE}" | jq -s 'try .' | jq 'try unique_by(.input)' | jq 'try .[]' 2>>"${LOGFILE}" >webs/web_full_info.txt
	[[ -s "webs/web_full_info.txt" ]] && cat webs/web_full_info.txt | jq -r 'try .url' 2>/dev/null | grep "${DOMAIN}" | sed "s/*.//" | anew -q .tmp/probed_tmp.txt
	[[ -s "webs/web_full_info.txt" ]] && cat webs/web_full_info.txt | jq -r 'try . |"\(.url) [\(.status_code)] [\(.title)] [\(.webserver)] \(.tech)"' | grep "${DOMAIN}" | anew -q webs/web_full_info_plain.txt
	[[ -s $outOfScope_file ]] && deleteOutScoped $outOfScope_file .tmp/probed_tmp.txt
	NUMOFLINES=$(cat .tmp/probed_tmp.txt 2>>"${LOGFILE}" | anew webs/webs.txt | sed '/^$/d' | wc -l)
	cat webs/webs.txt webs/webs_uncommon_ports.txt 2>/dev/null | anew -q .tmp/webs_all.txt
	end_subfunc "${NUMOFLINES} new websites resolved" "webprobe_simple"

	if [[ $PROXY == true ]] && [[ -n $proxy_url ]] && [[ $(cat webs/webs.txt | wc -l) -le $DEEP_LIMIT2 ]]; then
		notification "Sending websites to proxy" info
		ffuf -mc all -w webs/webs.txt -u FUZZ -replay-proxy $proxy_url 2>>"${LOGFILE}" >/dev/null
	fi
}

# Main
FORCE_EXECUTION=false
domain="$1"

shift
while [[ $# -gt 0 ]]; do
	case $1 in
	-h | --help)
		help_menu
		exit 0
		;;
	-f | --force)
		FORCE_EXECUTION=true
		shift
		;;
	*)
		echo "Unknown parameter passed: $1"
		exit 1
		;;
	esac
	shift
done

validate_inputs
run_webprobe_simple
