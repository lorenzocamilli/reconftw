#!/bin/bash

# Load environment variables from reconftw.cfg
# Load environment variables
if [ -f "reconftw.cfg" ]; then
    source reconftw.cfg
else
    echo "Error: reconftw.cfg not found!"
    exit 1
fi

# Colors
yellow="\033[1;33m"
reset="\033[0m"

# Help menu function
function display_help() {
    echo "$(basename "$0") [OPTIONS]"
    echo
    echo "Perform Prototype Pollution checks on provided inputs."
    echo "Options:"
    echo "  -h, --help    Display this help and exit"
    echo
}

# Validate requirements function
function validate_requirements() {
    if ! [ -x "$(command -v ppfuzz)" ]; then
        echo "Error: ppfuzz not found." >&2
        exit 1
    fi
    if ! [ -f "webs/url_extract.txt" ]; then
        echo "Error: url_extract.txt not found." >&2
        exit 1
    fi
}

# Prototype Pollution test function
function prototype_pollution_test() {
    if { [ ! -f "$called_fn_dir/.prototype_pollution" ] || [ "$DIFF" = true ]; } && [ "$PROTO_POLLUTION" = true ]; then
        echo "[*] Starting Prototype Pollution checks"
        if [ "$DEEP" = true ] || [[ $(cat webs/url_extract.txt | wc -l) -le $DEEP_LIMIT ]]; then
            [ -s "webs/url_extract.txt" ] && ppfuzz -l webs/url_extract.txt -c $PPFUZZ_THREADS 2>/dev/null | anew -q .tmp/prototype_pollution.txt
            [ -s ".tmp/prototype_pollution.txt" ] && cat .tmp/prototype_pollution.txt | sed -e '1,8d' | sed '/^\[ERR/d' | anew -q vulns/prototype_pollution.txt
            echo "[+] Results are saved in vulns/prototype_pollution.txt"
        else
            echo "[!] Skipping Prototype Pollution: Too many URLs to test, try with --deep flag"
        fi
    else
        if [ "$PROTO_POLLUTION" = false ]; then
            echo -e "\n${yellow} prototype_pollution skipped in this mode or defined in reconftw.cfg ${reset}"
        else
            echo -e "${yellow} prototype_pollution is already processed, to force executing prototype_pollution delete\n    $called_fn_dir/.prototype_pollution ${reset}\n"
        fi
    fi
}

# Main script execution
while (( "$#" )); do
    case "$1" in
        -h|--help)
            display_help
            exit 0
            ;;
        *) 
            echo "Unknown parameter passed: $1"
            display_help
            exit 1
            ;;
    esac
done

validate_requirements
prototype_pollution_test
